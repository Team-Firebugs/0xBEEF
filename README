I needed a exportable radix tree, that can hold moderate amounts of data and can 
be shared between processess, servers, and saved/loaded from files.

so far the result is not that bad:
    store native hash ($h{$key} = $value} - 6280418.91/s
    store 0xBEEF                          - 1319293.08/s
    store memcached fast                  - 26129.94/s

    get native hash (my $x = $h{$key})    - 7014893.53/s
    get 0xBEEF locally (copy of the pool) - 2518272/s
    get 0xBEEF                            - 1041716.01/s
    get memcached fast                    - 25899.05/s


the reason I am benchmarking against memcached is because the 0xBEEF pools can
be exported and forcefully overwritten (like reverse memcache pattern). So you 
can have a generator that populates data on several machines and cache it this way.

* Implementation

I ended up creating a simple shared memory pool protected by binary semaphore.
The radix nodes point to the next node by using offset like:
    pool->tree_blob[ node->branch['a'] ]

data structure looks like this:
    struct item {
        uint32_t branch[26];
        struct data {
            uint32_t off;
            uint32_t len;
        } data;
        uint8_t used;
    } __attribute__((aligned));

    struct pool {
        struct item root;
        uint32_t tree_pos;
        uint32_t data_pos;
        uint8_t tree_blob[TREE_BLOB_SIZE];
        uint8_t data_blob[DATA_BLOB_SIZE];
    } __attribute__((packed));
    
NB: for simplicity the pool id's can be only ODD numbers 
    (i use the even numbers to hold the protecting semaphore's id)

So everything is packed together, the tree's nodes live in the tree_blob
and point to other tree nodes using offsets from 0 (&pool->tree_blob[0])

and they contain data structure which holds offset from &pool->data_blob[0]
about where the data lives, and .len for how big it is.

* Install:

    perl Makefile.PL
    make && make test && make install

* simple usage cases:

create new pool:
 my $b = BEEF->new(odd-shared-memory-segment-id)

store something:
 $b->store("key","value");

fetch something:
 $b->find("key");
 
export the pool:
 my $exported = $b->export();
 
get some info about pool's usage:
 print $b->info();

import pool:
 $b->overwrite($blob);

reset:
 $b->reset();

    my $b = BEEF->new(0xBEEF); # or any odd int32
    $b->store("key","bzbz");
    my $value = $b->find("key");


    # export the pool into file
    my $exported = $b->export();
    open (my $fh, ">","/tmp/pool.binary") or die $!;
    print $fh $exported;
    close($fh);


    # load the pool form file
    my $b = BEEF->new(0xBEF1); # or any odd number
    open($fh,"<:raw","/tmp/pool.binary") or die $!;
    my $blob = do { local $/; <$fh>; };
    close($fh);
    $b->overwrite($blob);
    $b->find("key"); # bzbz

* TODO
   + crc the data to validate exported/imported pools
   + write simple multicast servers (using go.http for example)
   + try to make it from fixed size to dynamic size
 

* Licnese 
This software is copyright (c) 2013 by Borislav Nikolov.
This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.
 
